{"version":3,"sources":["serviceWorker.js","Components/UserComp/UserComp.js","Components/ShowUsers/ShowUsers.js","Utils/CommonUtils.js","Components/TodoComp/TodoComp.js","Components/UserTodos/UserTodos.js","Components/PostComp/PostComp.js","Components/UserPosts/UserPosts.js","Components/AddTodo/AddTodo.js","Components/AddPost/AddPost.js","Components/TodosAndPostsOfSelectedUser/TodosAndPostsOfSelectedUser.js","Utils/DALUtils.js","Components/AddUser/AddUser.js","Components/SearchFilter/SearchFilter.js","App.js","Redux/mainreducer.js","index.js"],"names":["Boolean","window","location","hostname","match","UserComp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showOtherData","state","otherDataVisible","setState","internalStateChange","hideShowData","updateField","e","_this$setState","inputName","target","name","value","defineProperty","pickUpdatedKeysFromObject","obj","keys","map","k","reduce","res","o","assign","userId","email","street","city","zipcode","tasksStatus","selectedUserId","_this2","taskStatus","otherDataStyle","display","userSelected","react_default","a","createElement","className","concat","react_router_dom","to","onClick","selectUser","type","onChange","onMouseOver","style","updateUser","deleteUser","nextProps","prevState","userData","Component","connect","dispatch","userObj","updatedUserData","ShowUsers","setSearchString","searchString","toLowerCase","users","todos","userComps","filteredUsers","filterString","filter","user","includes","index","id","userTasksStatus","Array","isArray","every","todo","completed","address","Components_UserComp_UserComp","key","array","myCustomProps","item","TodoComp","markCompleted","markTodoAsCompleted","capitalizeFirstLetter","string","charAt","toUpperCase","slice","markCompletedButton","title","toString","todoId","completedValue","UserTodos","userTodos","userTodosArray","Components_TodoComp_TodoComp","url","Number","parseInt","params","history","push","length","PostComp","post","body","UserPosts","userPosts","userPostsArray","Components_PostComp_PostComp","posts","AddTodo","titleError","cancel","addTodo","alert","AddPost","bodyError","addPost","TodosAndPostsOfSelectedUser","react_router","path","component","DALUtils","axios","get","AddUser","localStorage","takenFromLocalStorage","nameError","emailError","addUser","updatedState","goBack","SearchFilter","placeholder","App","Promise","resolve","then","DAL","resp","newData","data","Components_SearchFilter_SearchFilter","Components_ShowUsers_ShowUsers","groupItemsByUserId","maxItemId","userIdItemsArray","forEach","mainreducer","arguments","undefined","maxUserId","maxPostId","maxTodoId","action","_getUsersDataByUserId","rawUsersData","usersDataByUserId","getUsersDataByUserId","_getUsersDataByUserId2","slicedToArray","objectSpread","userIdPostsArray","_groupItemsByUserId","_groupItemsByUserId2","userIdTodosArray","_groupItemsByUserId3","_groupItemsByUserId4","updatedUserId","updatedUser","curUser","getUpdatedUser","newTodo","newPost","newUserId","newUser","find","appStore","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4349fc84.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from 'react-router-dom' ;\r\nimport './UserComp.css';\r\n\r\nclass UserComp extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state ={\r\n            userId:0,\r\n            name:\"\",\r\n            email:\"\",\r\n            otherDataVisible: false,\r\n            street:\"\",\r\n            city:\"\",\r\n            zipcode:\"\",\r\n            tasksStatus:\"completedTasks\", // TODO! probably should stay in props\r\n            internalStateChange: false,\r\n            selectedUserId:0\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps,prevState)\r\n    {\r\n        // State is changed from inside - not by props from parent.\r\n        // Return prevState as is with the internalStateChange flag reset.\r\n        if( prevState.internalStateChange){\r\n            return { internalStateChange:false};\r\n        }\r\n        else {\r\n            return {\r\n                userId: nextProps.userData.userId,\r\n                name: nextProps.userData.name,\r\n                email: nextProps.userData.email,\r\n                street: nextProps.userData.street,\r\n                city: nextProps.userData.city,\r\n                zipcode: nextProps.userData.zipcode,\r\n                tasksStatus: nextProps.userData.tasksStatus,\r\n                selectedUserId: nextProps.userData.selectedUserId\r\n            };\r\n        }\r\n    }\r\n\r\n    showOtherData = ( ) =>\r\n    {\r\n       if( !this.state.otherDataVisible) {\r\n           //console.log(\"showOtherData\");\r\n           this.setState({otherDataVisible: true, internalStateChange: true});\r\n       }\r\n    }\r\n\r\n    hideShowData  = ( ) =>\r\n    {\r\n        this.setState({otherDataVisible:false});\r\n        if( this.state.otherDataVisible) {\r\n            //console.log(\"hideShowData\");\r\n            this.setState({otherDataVisible: false, internalStateChange: true});\r\n        }\r\n    }\r\n\r\n    updateField = (e) =>\r\n    {\r\n        let inputName = e.target.name;\r\n        let value = e.target.value;\r\n        this.setState({[inputName]:value, internalStateChange: true});\r\n    }\r\n\r\n    //@link:https://www.jstips.co/en/javascript/picking-and-rejecting-object-properties/\r\n    pickUpdatedKeysFromObject = (obj, keys) =>\r\n    {\r\n        return keys.map(k => k in obj ? {[k]: obj[k]} : {})\r\n            .reduce((res, o) => Object.assign(res, o), {});\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"UserComp render userId = \" + this.state.userId);\r\n        let taskStatus = this.state.tasksStatus; //\"uncompletedTasks\";\r\n        const otherDataStyle = {\r\n            display:this.state.otherDataVisible ? \"block\" : \"none\"\r\n        };\r\n        let userSelected = (this.state.userId === this.state.selectedUserId) ? \"userSelected\" : \"\";\r\n        return(\r\n\r\n            <div className={`UserComp ${taskStatus} ${userSelected}`} >\r\n                <Link to={`/user/${this.state.userId}`} >\r\n                    <div className={\"rowDiv id\"}\r\n                         onClick={() => this.props.selectUser(this.state.userId)}\r\n                    >\r\n                        <span className={\"label\"}> ID :</span>\r\n                        <span>{this.state.userId}</span>\r\n                    </div>\r\n                </Link>\r\n                <div className={\"rowDiv name\"}>\r\n                    <span className={\"label\"}> Name :</span>\r\n                        <input type=\"text\" name={\"name\"}\r\n                               value={this.state.name}\r\n                                onChange={this.updateField}/>\r\n                </div>\r\n                <div className={\"rowDiv email\"}>\r\n                    <span className={\"label\"}> Email :</span>\r\n                        <input type=\"text\" name={\"email\"}\r\n                              value={this.state.email}\r\n                               onChange={this.updateField}/>\r\n                </div>\r\n\r\n                <div className={\"buttonsAndOtherData\"}>\r\n                    <input type=\"button\" className={\"otherDataButton  button\"}\r\n                           onMouseOver={this.showOtherData}\r\n                           onClick={this.hideShowData}\r\n                           value={\"Other Data\"}/>\r\n\r\n                    <div className={\"otherDataDiv\"} style={otherDataStyle} >\r\n                        <div className={\"rowDiv\"}>\r\n                            <span className={\"label\"}> Street :</span>\r\n                            <input type=\"text\" name={\"street\"} value={this.state.street} onChange={this.updateField}/>\r\n                        </div>\r\n                        <div className={\"rowDiv\"}>\r\n                            <span className={\"label\"}> City :</span>\r\n                            <input type=\"text\" name={\"city\"} value={this.state.city} onChange={this.updateField}/>\r\n                        </div>\r\n                        <div className={\"rowDiv\"}>\r\n                            <span className={\"label\"}> Zipcode :</span>\r\n                            <input type=\"text\" name={\"zipcode\"} value={this.state.zipcode} onChange={this.updateField}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <input type=\"button\" className={\"userButton  button\"}\r\n                           onClick={() => this.props.updateUser(this)}\r\n                           value={\"Update\"}\r\n                    />\r\n                    <input type=\"button\" className={\"userButton  button\"}\r\n                           onClick={() => this.props.deleteUser(this.state.userId)}\r\n                           value={\"Delete\"}/>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        // dispatching plain actions\r\n        deleteUser: (userId) =>\r\n        {\r\n            dispatch({ type: 'DELETE_USER',userId:userId })\r\n        },\r\n        updateUser: (userObj ) =>\r\n        {\r\n            let updatedUserKeys =[\r\n                'userId',\r\n                'name',\r\n                'email',\r\n                'street',\r\n                'city',\r\n                'zipcode'\r\n            ];\r\n            let updatedUserData = userObj.pickUpdatedKeysFromObject(userObj.state,updatedUserKeys);\r\n            dispatch({ type : 'UPDATE_USER', updatedUserData : updatedUserData});\r\n        },\r\n        selectUser: (userId) =>\r\n        {\r\n            dispatch({ type : 'SELECT_USER', userId : userId});\r\n        }\r\n    }\r\n}\r\n\r\nexport default (connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(UserComp));","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport UserComp from '../UserComp/UserComp';\r\nimport './ShowUsers.css';\r\nimport {filterFromUndefined} from \"../../Utils/CommonUtils\";\r\n\r\n/**\r\n * Container connected to redux to pull, hold and render Users list.\r\n */\r\nclass ShowUsers extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            todos: [],\r\n            searchString:\"\",\r\n            selectedUserId:0\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps,prevState) {\r\n        return {\r\n            users: filterFromUndefined(nextProps.myCustomProps.users),\r\n            todos: nextProps.myCustomProps.todos,\r\n            selectedUserId: nextProps.myCustomProps.selectedUserId,\r\n            searchString: nextProps.myCustomProps.searchString\r\n        }\r\n    }\r\n\r\n    setSearchString = (e) =>\r\n    {\r\n        // case insensitive.\r\n        this.setState({searchString : e.target.value.toLowerCase()});\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"ShowUsers Render()\");\r\n        let userComps = [];\r\n        // let todos = this.state.todos;\r\n        let filteredUsers = this.state.users;\r\n        let filterString = this.state.searchString;\r\n\r\n        if( filterString !== \"\" ) {\r\n            filteredUsers = filteredUsers.filter(function (user) {\r\n                return (\r\n                    user.name.toLowerCase().includes(filterString) ||\r\n                    user.email.toLowerCase().includes(filterString)\r\n                )\r\n            });\r\n        }\r\n\r\n        userComps = filteredUsers.map((user, index) => {\r\n            let userId = user.id;\r\n            let todos = this.state.todos;\r\n            let userTasksStatus = \"completedTasks\";\r\n            if (Array.isArray(todos[userId])) {\r\n                let allTasksCompleted = todos[userId].every(function (todo) {\r\n                    return (todo.completed === true);\r\n                });\r\n                userTasksStatus = (allTasksCompleted === true) ? \"completedTasks\" : \"uncompletedTasks\";\r\n            }\r\n\r\n            let userData = {\r\n                userId:userId,\r\n                name:user.name,\r\n                email:user.email,\r\n                street:user.address.street,\r\n                city:user.address.city,\r\n                zipcode:user.address.zipcode,\r\n                tasksStatus:userTasksStatus,\r\n                selectedUserId:this.state.selectedUserId\r\n            };\r\n            return <UserComp key={index}\r\n                             userData = {userData} />\r\n        },this);\r\n\r\n        return (\r\n            <div className=\"ShowUsers\">\r\n                {userComps}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {myCustomProps: state};\r\n}\r\n\r\nexport default connect(mapStateToProps)(ShowUsers);","// export default function filterFromUndefined (array)\r\nexport function filterFromUndefined (array)\r\n{\r\n    let filteredItems = array.filter(item =>\r\n    {\r\n        return (item !== \"undefined\");\r\n    });\r\n    return filteredItems;\r\n}","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './TodoComp.css';\r\n\r\nclass TodoComp extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state ={\r\n            todo:{},\r\n            internalStateChange: false\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps,prevState)\r\n    {\r\n        // State is changed from inside - not by props from parent.\r\n        // Return prevState as is with the internalStateChange flag reset.\r\n        if( prevState.internalStateChange){\r\n            return { internalStateChange:false};\r\n        }\r\n        else {\r\n            // from parent props update.\r\n            return {\r\n                todo:nextProps.todo\r\n            };\r\n        }\r\n    }\r\n\r\n    markCompleted = () =>\r\n    {\r\n        // state update forces re-rendering.\r\n        this.setState({internalStateChange: true});\r\n        this.props.markTodoAsCompleted(this.state.todo.userId, this.state.todo.id);\r\n    }\r\n\r\n    capitalizeFirstLetter = (string) => {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"TodoComp render userId = \" + this.state.todo.userId + \" todo Id = \" + this.state.todo.id );\r\n\r\n        let markCompletedButton = \"\";\r\n        if( !this.state.todo.completed ) {\r\n            markCompletedButton = <span className={\"markCompletedButtonSpan\"}>\r\n                <input type=\"button\" className={\"markCompletedButton button\"}\r\n                                         onClick={this.markCompleted}\r\n                                         value={\"Mark Completed\"}/></span>;\r\n        }\r\n\r\n        return(\r\n            <div className={\"TodoComp\"}>\r\n                <div className={\"rowDiv\"}>\r\n                    <span className={\"label\"}> Title :</span>\r\n                    <span className={\"content\"}>{this.state.todo.title}</span>\r\n                </div>\r\n\r\n                <div className={\"rowDiv\"}>\r\n                    <span className={\"label\"}> Completed :</span>\r\n                    <span className={\"content\"}>{this.capitalizeFirstLetter(this.state.todo.completed.toString())}</span>\r\n                    {markCompletedButton}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        // dispatching mark todoItem as completed\r\n        markTodoAsCompleted: (userId, todoId) =>\r\n        {\r\n            dispatch({ type: 'SET_TODO_STATUS',userId:userId, todoId:todoId,completedValue:true })\r\n        },\r\n    }\r\n}\r\n\r\nexport default (connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(TodoComp));\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from 'react-router-dom' ;\r\nimport TodoComp from '../TodoComp/TodoComp';\r\nimport './UserTodos.css';\r\n\r\nclass UserTodos extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state= {userId:0, userTodos:[] };\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState)\r\n    {\r\n        let userId = Number.parseInt(nextProps.match.params.userId);\r\n        let selectedUserId = nextProps.myCustomProps.selectedUserId;\r\n        //for direct loading not by selecting user - wil be redirected.\r\n        if( !selectedUserId || // 0 means no user was selected\r\n            (userId !== selectedUserId) //\r\n        ) {\r\n            nextProps.history.push('/');\r\n        }\r\n        let userTodos = [];\r\n        if ( (nextProps.myCustomProps.todos.length) &&\r\n            Array.isArray(nextProps.myCustomProps.todos[userId]))\r\n        {\r\n            userTodos = nextProps.myCustomProps.todos[userId];\r\n        }\r\n        return {\r\n                userId: userId,\r\n                userTodos: userTodos,\r\n            };\r\n    }\r\n\r\n    render() {\r\n\r\n        //console.log(\"UserTodos render\");\r\n        let userTodosArray = this.state.userTodos.map( (todo, index) =>\r\n            {\r\n                return <TodoComp key={index} todo={todo} />;\r\n            }\r\n        );\r\n        return (\r\n            <div className=\"UserTodos\">\r\n                <div className=\"UserTodosHeader\">\r\n                    <span className={\"label\"}>\r\n                        <h4>Todos - User {this.state.userId}</h4>\r\n                    </span>\r\n\r\n                    <span className={\"addTodoButton\"}>\r\n                        <Link to={`${this.props.match.url}/addTodo`}>\r\n                            <input className={\"button\"}  type=\"button\" value={\"Add\"} />\r\n                        </Link>\r\n                    </span>\r\n\r\n                </div>\r\n\r\n                <div className=\"UserTodosBody\">\r\n                {userTodosArray}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {myCustomProps: state};\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserTodos);\r\n","import React, { Component } from 'react';\r\nimport './PostComp.css';\r\n\r\nclass PostComp extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state ={\r\n            post:{}\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps,prevState)\r\n    {\r\n        // from parent props update.\r\n        return {\r\n            post:nextProps.post\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"PostComp render userId = \" + this.state.post.userId + \" post Id = \" + this.state.post.id );\r\n\r\n        return(\r\n            <div className={\"PostComp\"}>\r\n                <div className={\"rowDiv\"}>\r\n                    <span className={\"label\"}> Title :</span>\r\n                    <span className={\"content\"}>{this.state.post.title}</span>\r\n                </div>\r\n\r\n                <div className={\"rowDiv\"}>\r\n                    <span className={\"label\"}> Body :</span>\r\n                    <span className={\"content\"}>{this.state.post.body}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostComp;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PostComp from '../PostComp/PostComp';\r\nimport './UserPosts.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass UserPosts extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state= {userId:0, userPosts:[] };\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState)\r\n    {\r\n        let userId = Number.parseInt(nextProps.match.params.userId);\r\n        let selectedUserId = nextProps.myCustomProps.selectedUserId;\r\n        //for direct loading not by selecting user - wil be redirected.\r\n        if( !selectedUserId || // 0 means no user was selected\r\n            (userId !== selectedUserId) //\r\n        ) {\r\n            nextProps.history.push('/');\r\n        }\r\n        let userPosts = [];\r\n        if ( (nextProps.myCustomProps.posts.length) &&\r\n            Array.isArray(nextProps.myCustomProps.posts[userId]))\r\n        {\r\n            userPosts = nextProps.myCustomProps.posts[userId];\r\n        }\r\n        return {\r\n            userId: userId,\r\n            userPosts: userPosts,\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        //console.log(\"UserTodos render\");\r\n        let userPostsArray = this.state.userPosts.map( (post, index) =>\r\n            {\r\n                return <PostComp key={index} post={post} />;\r\n            }\r\n        );\r\n        return (\r\n            <div className=\"UserPosts\">\r\n                <div className=\"UserPostsHeader\">\r\n                    <span className={\"label\"}>\r\n                        <h4>Posts - User {this.state.userId}</h4>\r\n                    </span>\r\n                    <span className={\"addPostButton\"}>\r\n                        <Link to={`${this.props.match.url}/addPost`}>\r\n                            <input className={\"button\"}  type=\"button\" value={\"Add\"} />\r\n                        </Link>\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"UserPostsBody\">\r\n                    {userPostsArray}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {myCustomProps: state};\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserPosts);\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './AddTodo.css';\r\n\r\nclass AddTodo extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state ={\r\n            userId:0,\r\n            selectedUserId:0,\r\n            title:\"\",\r\n            internalStateChange:false\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps,prevState)\r\n    {\r\n        //START TODO! Think how to reuse this code instead copying.\r\n        let userId = Number.parseInt(nextProps.match.params.userId);\r\n        let selectedUserId = nextProps.myCustomProps.selectedUserId;\r\n        //for direct loading, not by selecting user - wil be redirected.\r\n        if( !selectedUserId || // 0 means no user was selected - direct navigation.\r\n            (userId !== selectedUserId) // selected user deleted\r\n        ) {\r\n            nextProps.history.push('/');\r\n        }\r\n        // END\r\n        // State is changed from inside - not by props from parent.\r\n        // Return prevState as is with the internalStateChange flag reset.\r\n        if( prevState.internalStateChange){\r\n            return { internalStateChange:false};\r\n        }\r\n        else {\r\n            return {\r\n                userId: nextProps.match.params.userId,\r\n                selectedUserId: selectedUserId\r\n            };\r\n        }\r\n    }\r\n\r\n    updateField = (e) =>\r\n    {\r\n        let inputName = e.target.name;\r\n        let value = e.target.value;\r\n        this.setState({[inputName]:value, internalStateChange: true});\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"UserComp render userId = \" + this.state.userId);\r\n        let titleError = this.state.titleError ? \"titleError\" : \"\";\r\n        return(\r\n            <div className={\"AddTodo\"}>\r\n\r\n                <div className=\"AddTodoHeader\">\r\n                    <span className={\"label\"}>\r\n                        <h4>Add New Todo - User {this.state.userId}</h4>\r\n                    </span>\r\n\r\n                </div>\r\n                <div className=\"AddTodoBody\">\r\n                    <div className={`rowDiv title ${titleError}`}>\r\n                        <span className={\"label\"}> Title :</span>\r\n                        <input type=\"text\" name={\"title\"}\r\n                               value={this.state.title}\r\n                               onChange={this.updateField}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={\"rowDiv buttons\"}>\r\n                        <span>\r\n                            <input type=\"button\" className={\"userButton  button\"}\r\n                                   onClick={() => this.props.cancel(this.state.userId,this)}\r\n                                   value={\"Cancel\"}\r\n                            />\r\n                        </span>\r\n                        <span>\r\n                            <input type=\"button\" className={\"userButton  button\"}\r\n                                   onClick={() => this.props.addTodo(this.state.userId, this.state.title,this)}\r\n                                   value={\"Add\"}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        // dispatching plain actions\r\n        cancel: (userId,obj) =>\r\n        {\r\n            // obj.props.history.goBack();\r\n            obj.props.history.push(`/user/${userId}`);\r\n        },\r\n        addTodo: (userId,title,obj) =>\r\n        {\r\n            if( !title.length) {\r\n                alert(\"Title can not be empty!\");\r\n                obj.setState({titleError:true,internalStateChange: true});\r\n                return;\r\n            }\r\n            dispatch({ type: 'ADD_TODO',userId:userId, title: title });\r\n            obj.props.history.push(`/user/${userId}`);\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {myCustomProps: state};\r\n}\r\n\r\nexport default (connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddTodo));\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './AddPost.css';\r\n\r\nclass AddPost extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state ={\r\n            userId:0,\r\n            selectedUserId:0,\r\n            title:\"\",\r\n            body:\"\",\r\n            internalStateChange:false\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps,prevState)\r\n    {\r\n        //START TODO! Think how to reuse this code instead copying.\r\n        let userId = Number.parseInt(nextProps.match.params.userId);\r\n        let selectedUserId = nextProps.myCustomProps.selectedUserId;\r\n        //for direct loading, not by selecting user - wil be redirected.\r\n        if( !selectedUserId || // 0 means no user was selected - direct navigation.\r\n            (userId !== selectedUserId) // selected user deleted\r\n        ) {\r\n            nextProps.history.push('/');\r\n        }\r\n        // END\r\n        // State is changed from inside - not by props from parent.\r\n        // Return prevState as is with the internalStateChange flag reset.\r\n        if( prevState.internalStateChange){\r\n            return { internalStateChange:false};\r\n        }\r\n        else {\r\n            return {\r\n                userId: nextProps.match.params.userId,\r\n                selectedUserId: selectedUserId\r\n            };\r\n        }\r\n    }\r\n\r\n    updateField = (e) =>\r\n    {\r\n        let inputName = e.target.name;\r\n        let value = e.target.value;\r\n        this.setState({[inputName]:value, internalStateChange: true});\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"UserComp render userId = \" + this.state.userId);\r\n        let titleError = this.state.titleError ? \"titleError\" : \"\";\r\n        let bodyError = this.state.bodyError ? \"bodyError\" : \"\";\r\n\r\n        return(\r\n            <div className={\"AddPost\"}>\r\n\r\n                <div className=\"AddPostHeader\">\r\n                    <span className={\"label\"}>\r\n                        <h4>Add New Post - User {this.state.userId}</h4>\r\n                    </span>\r\n\r\n                </div>\r\n                <div className=\"AddPostBody\">\r\n                    <div className={`rowDiv title ${titleError}`}>\r\n                        <span className={\"label\"}> Title :</span>\r\n                        <input type=\"text\" name={\"title\"}\r\n                               value={this.state.title}\r\n                               onChange={this.updateField}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={`rowDiv body ${bodyError}`}>\r\n                        <span className={\"label\"}> Body :</span>\r\n                        <input type=\"text\" name={\"body\"}\r\n                               value={this.state.body}\r\n                               onChange={this.updateField}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={\"rowDiv buttons\"}>\r\n                        <span>\r\n                            <input type=\"button\" className={\"userButton  button\"}\r\n                                   onClick={() => this.props.cancel(this.state.userId,this)}\r\n                                   value={\"Cancel\"}\r\n                            />\r\n                        </span>\r\n                        <span>\r\n                            <input type=\"button\" className={\"userButton  button\"}\r\n                                   onClick={() => {\r\n                                       this.props.addPost(this.state.userId,\r\n                                           this.state.title,\r\n                                           this.state.body,\r\n                                           this)\r\n                                   }\r\n                               }\r\n                                   value={\"Add\"}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        // dispatching plain actions\r\n        cancel: (userId,obj) =>\r\n        {\r\n            obj.props.history.push(`/user/${userId}`);\r\n        },\r\n        addPost: (userId,title,body,obj) =>\r\n        {\r\n            if( !title.length ) {\r\n                alert(\"Title can not be empty!\");\r\n                obj.setState({titleError:true,internalStateChange: true});\r\n                return;\r\n            }\r\n            if( !body.length) {\r\n                alert(\"Body can not be empty!\");\r\n                obj.setState({titleError:false,bodyError:true,internalStateChange: true});\r\n                return;\r\n            }\r\n            dispatch({ type: 'ADD_POST',userId:userId, title: title, body:body });\r\n            obj.props.history.push(`/user/${userId}`);\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {myCustomProps: state};\r\n}\r\n\r\nexport default (connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddPost));\r\n","import React, { Component } from 'react';\nimport {Switch,Route} from 'react-router-dom' ;\n\nimport './TodosAndPostsOfSelectedUser.css';\nimport UserTodos from '../UserTodos/UserTodos';\nimport UserPosts from '../UserPosts/UserPosts';\nimport AddTodo from '../AddTodo/AddTodo';\nimport AddPost from \"../AddPost/AddPost\";\n\n/**\n * Root Point of routing at the right side of page.\n */\nclass TodosAndPostsOfSelectedUser extends Component {\n\n  render() {\n    return (\n        <div className={\"TodosAndPosts\"}>\n            <div className={\"fluid-container\"}>\n                <Switch>\n                    <Route path={\"/user/:userId/addTodo\"} component={AddTodo}/>\n                    <Route path={\"/user/:userId\"} component={UserTodos}/>\n                </Switch>\n                <Switch>\n                    <Route path={\"/user/:userId/addPost\"} component={AddPost}/>\n                    <Route path={\"/user/:userId\"} component={UserPosts}/>\n                </Switch>\n            </div>\n        </div>\n    );\n  }\n}\nexport default TodosAndPostsOfSelectedUser;","import axios from 'axios/index';\r\n\r\nlet getData = (url) =>\r\n{\r\n    return axios.get(url);\r\n}\r\n\r\nexport default {getData};","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './AddUser.css';\r\n\r\nclass AddUser extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            name:\"\",\r\n            email:\"\",\r\n            selectedUserId:0,\r\n            internalStateChange:false,\r\n            takenFromLocalStorage:false\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps,prevState)\r\n    {\r\n        let selectedUserId = nextProps.myCustomProps.selectedUserId;\r\n\r\n        // State is changed from inside - not by props from parent.\r\n        // Return prevState as is with the internalStateChange flag reset.\r\n        if( prevState.internalStateChange){\r\n            return { internalStateChange:false};\r\n        }\r\n        else {\r\n            let updatedState = {\r\n                selectedUserId: selectedUserId\r\n            };\r\n            if( !prevState.takenFromLocalStorage) {\r\n                //TODO! use constants\r\n                updatedState = {\r\n                    name:localStorage[`addUser-name`],\r\n                    email:localStorage[`addUser-email`],\r\n                    selectedUserId: selectedUserId,\r\n                    takenFromLocalStorage:true\r\n                };\r\n            }\r\n            return updatedState;\r\n        }\r\n    }\r\n\r\n    updateField = (e) =>\r\n    {\r\n        let inputName = e.target.name;\r\n        let value = e.target.value;\r\n        this.setState({[inputName]:value, internalStateChange: true});\r\n        localStorage[`addUser-${inputName}`] = value;\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"AddUser render\");\r\n        let nameError = this.state.titleError ? \"nameError\" : \"\";\r\n        let emailError = this.state.bodyError ? \"emailError\" : \"\";\r\n\r\n        return(\r\n            <div className={\"AddUser\"}>\r\n\r\n                <div className=\"AddUserHeader\">\r\n                    <span className={\"label\"}>\r\n                        <h4>Add New User</h4>\r\n                    </span>\r\n\r\n                </div>\r\n                <div className=\"AddUserBody\">\r\n                    <div className={`rowDiv name ${nameError}`}>\r\n                        <span className={\"label\"}> Name :</span>\r\n                        <input type=\"text\" name={\"name\"}\r\n                               value={this.state.name}\r\n                               onChange={this.updateField}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={`rowDiv email ${emailError}`}>\r\n                        <span className={\"label\"}> Email :</span>\r\n                        <input type=\"text\" name={\"email\"}\r\n                               value={this.state.email}\r\n                               onChange={this.updateField}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={\"rowDiv buttons\"}>\r\n                        <span>\r\n                            <input type=\"button\" className={\"userButton  button\"}\r\n                                   onClick={() => this.props.cancel(this)}\r\n                                   value={\"Cancel\"}\r\n                            />\r\n                        </span>\r\n                        <span>\r\n                            <input type=\"button\" className={\"userButton  button\"}\r\n                                   onClick={() => {\r\n                                       this.props.addUser(\r\n                                           this.state.name,\r\n                                           this.state.email,\r\n                                           this)\r\n                                   }\r\n                               }\r\n                                   value={\"Add\"}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        // dispatching plain actions\r\n        cancel: (obj) =>\r\n        {\r\n            goBack(obj);\r\n        },\r\n        addUser: (name,email,obj) =>\r\n        {\r\n            if( !name.length ) {\r\n                alert(\"Name can not be empty!\");\r\n                obj.setState({titleError:true});\r\n                return;\r\n            }\r\n            if( !email.length) {\r\n                alert(\"Body can not be empty!\");\r\n                obj.setState({titleError:false,bodyError:true});\r\n                return;\r\n            }\r\n            dispatch({ type: 'ADD_USER', name: name, email:email });\r\n            // reset relevant local storage.\r\n            localStorage[`addUser-name`] = \"\";\r\n            localStorage[`addUser-email`] = \"\";\r\n            goBack(obj);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * It depends if the was selectedUSerId.\r\n * @param obj\r\n */\r\nconst goBack = (obj) => {\r\n    let selectedUSerId = obj.state.selectedUserId;\r\n    if( selectedUSerId ) {\r\n        obj.props.history.goBack();\r\n    }\r\n    else {\r\n        obj.props.history.push(`/`);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {myCustomProps: state};\r\n}\r\n\r\nexport default (connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddUser));","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './SearchFilter.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n/**\r\n * To filter users by name or email.\r\n */\r\nclass SearchFilter extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            searchString:\"\"\r\n        }\r\n    }\r\n\r\n    updateField = (e) =>\r\n    {\r\n        let inputName = e.target.name;\r\n        let value = e.target.value;\r\n        this.setState({[inputName]:value});\r\n    };\r\n\r\n    render() {\r\n        //console.log(\"SearchFilter render\");\r\n\r\n        return(\r\n            <div className={\"SearchFilter\"}>\r\n                <div className={\"rowDiv\"}>\r\n                    <span className={\"label\"}> Search :</span>\r\n                    <input type=\"text\" name={\"searchString\"}\r\n                           placeholder={\"Name or email\"}\r\n                           value={this.state.searchString}\r\n                           onChange={(e) => {\r\n                               this.updateField(e);\r\n                               this.props.setSearchString(e.target.value.toLowerCase())\r\n                           }\r\n                           }\r\n                    />\r\n                    <span className={\"addUserSpan\"}>\r\n                        <Link to={`/addUser`}>\r\n                            <input className={\"button\"} type=\"button\" value={\"Add\"}/>\r\n                        </Link>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        // dispatching plain actions\r\n        setSearchString: (searchString) =>\r\n        {\r\n            dispatch({ type: 'SET_SEARCH_STRING', searchString: searchString});\r\n        }\r\n    }\r\n}\r\n\r\nexport default (connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(SearchFilter));","import React, { Component } from 'react';\nimport  { connect } from 'react-redux';\nimport {Switch,Route} from 'react-router-dom' ;\nimport './App.css';\nimport ShowUsers from './Components/ShowUsers/ShowUsers';\nimport TodosAndPostsOfSelectedUser from './Components/TodosAndPostsOfSelectedUser/TodosAndPostsOfSelectedUser';\nimport DAL from \"./Utils/DALUtils\";\nimport AddUser from \"./Components/AddUser/AddUser\";\nimport SearchFilter from './Components/SearchFilter/SearchFilter';\n\n/**\n * Main Component loads data and starts routing tree.\n */\nclass App extends Component {\n\n    /**\n     * To get data from the web and send to redux store.\n     */\n    componentDidMount()\n    {\n//@link:https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n        let p = Promise.resolve();\n        p.then(() => {\n            let r1 = DAL.getData('https://jsonplaceholder.typicode.com/users')\n                .then(resp => {\n                    //console.log(resp.data);\n                    this.props.dispatch({type:'INIT_USERS',  'newData':resp.data } )\n                } );\n            return r1;\n        })\n        .then(() => {\n            let r2 = DAL.getData('https://jsonplaceholder.typicode.com/posts')\n                .then(resp => {\n                    //console.log(resp.data);\n                    this.props.dispatch({type:'INIT_POSTS', 'newData':resp.data } )\n                } );\n            return r2;\n        })\n        .then(() => {\n            return DAL.getData('https://jsonplaceholder.typicode.com/todos')\n                .then(resp => {\n                    //console.log(resp.data);\n                    this.props.dispatch({type:'INIT_TODOS', 'newData':resp.data } )\n                } );\n        })\n            .then(() => {\n                this.props.dispatch({type:'INIT_COMMIT',  } )\n            })\n        ;\n    }\n\n  render() {\n    return (\n      <div className=\"App flex\">\n          <div className={\"section Main\"}>\n            <SearchFilter />\n            <ShowUsers />\n          </div>\n          <div className={\"section\"}>\n              <Switch>\n                  <Route path={\"/addUser\"} component={AddUser}/>\n                  <Route path={\"/user/:userId\"} component={TodosAndPostsOfSelectedUser}/>\n              </Switch>\n          </div>\n      </div>\n    );\n  }\n}\n//withRouter(\n//@link:https://stackoverflow.com/questions/44356360/react-router-work-on-reload-but-not-when-clicking-on-a-link\n//@link:https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/redux.md#blocked-updates\n// export default withRouter(connect()(App));\nexport default (connect()(App));","/**\r\n * Main Reducer to hold app state.\r\n * @param state\r\n * @param action\r\n * @returns {{searchString: string, maxTodoId: number, maxPostId: number, todos: Array, maxUserId: number, posts: Array, users: Array, selectedUserId: number}|({searchString, maxTodoId, maxPostId, todos, maxUserId, posts, users, selectedUserId}&{maxUserId: *, users: *})|({searchString, maxTodoId, maxPostId, todos, maxUserId, posts, users, selectedUserId}&{maxUserId, users})|*|({searchString, maxTodoId, maxPostId, todos, maxUserId, posts, users, selectedUserId}&{maxUserId, users}&{selectedUserId: *})|*}\r\n */\r\nconst mainreducer = (state = {\r\n    users:[],\r\n    posts:[],\r\n    todos:[],\r\n    searchString:\"\",\r\n    selectedUserId:0,\r\n    maxUserId:0,\r\n    maxPostId:0,\r\n    maxTodoId:0,\r\n}, action) => {\r\n    // action={type:'ADD', 'newData':data }\r\n    switch (action.type) {\r\n        case 'INIT_USERS' : {\r\n            let rawUsersData = action.newData;\r\n            let [maxUserId,usersDataByUserId] = getUsersDataByUserId(rawUsersData);\r\n            state = {...state,users:usersDataByUserId,maxUserId:maxUserId};\r\n            return state;\r\n        }\r\n\r\n        case 'INIT_POSTS' : {\r\n            let posts = action.newData;\r\n            let userIdPostsArray = [], maxPostId = 0;\r\n\r\n            [maxPostId,userIdPostsArray] = groupItemsByUserId(posts, state.users);\r\n            let key = 'posts';\r\n            // state = {...state,[key]:userIdPostsArray};\r\n            state[key] = userIdPostsArray;// no mutation,no broadcasting\r\n            state.maxPostId = maxPostId;\r\n            return state;\r\n        }\r\n\r\n        case 'INIT_TODOS' : {\r\n            let todos = action.newData;\r\n            let userIdTodosArray = [], maxTodoId = 0;\r\n            [maxTodoId,userIdTodosArray]= groupItemsByUserId(todos, state.users);\r\n            let key = 'todos';\r\n            // state = {...state,[key]:userIdTodosArray};\r\n            state[key] = userIdTodosArray; // no mutation,no broadcasting\r\n            state.maxTodoId = maxTodoId;\r\n            return state;\r\n        }\r\n        case 'INIT_COMMIT' : {\r\n            state = {...state}; // mutation and broadcasting\r\n            return state;\r\n        }\r\n\r\n        //{ type: 'SET_SEARCH_STRING', searchString: searchString}\r\n        case 'SET_SEARCH_STRING' : {\r\n            state = {...state}; // mutation and broadcasting\r\n            state.searchString = action.searchString;\r\n            return state;\r\n        }\r\n        case 'UPDATE_USER' : {\r\n            let updatedUserData = action.updatedUserData;\r\n            let updatedUserId = updatedUserData.userId;\r\n\r\n            state = {...state}; // mutation and broadcasting\r\n            let curUser = state.users[updatedUserId];\r\n            let updatedUser = getUpdatedUser(curUser,updatedUserData);\r\n            state.users[updatedUserId] = {...updatedUser};\r\n            return state;\r\n        }\r\n        case 'DELETE_USER' : {\r\n            /**\r\n             * delete operator causes deleted cells to appear as \"undefined\".\r\n             */\r\n            let userId = action.userId;\r\n            state = {...state}; // mutation and broadcasting\r\n            if (userId === state.selectedUserId){\r\n                state.selectedUserId = 0;\r\n            }\r\n            delete  state.posts[userId];\r\n            delete  state.todos[userId];\r\n            delete  state.users[userId];\r\n            return state;\r\n        }\r\n\r\n        // { type: 'ADD_TODO',userId:userId, title: title }\r\n\r\n        case 'ADD_TODO' : {\r\n            let userId = action.userId;\r\n            let title = action.title;\r\n            state = {...state}; // mutation and broadcasting\r\n            let newTodoId = state.maxTodoId+1;\r\n            let newTodo = {\r\n                id:newTodoId,\r\n                userId:userId,\r\n                title:title,\r\n                completed:false\r\n            };\r\n            state.maxTodoId++;\r\n            state.todos[userId].push(newTodo);\r\n            return state;\r\n        }\r\n\r\n        // { type: 'ADD_POST',userId:userId, title: title, body:body }\r\n        case 'ADD_POST' : {\r\n            let userId = action.userId;\r\n            let title = action.title;\r\n            let body = action.body;\r\n            state = {...state}; // mutation and broadcasting\r\n            let newPostId = state.maxPostId+1;\r\n            let newPost = {\r\n                id:newPostId,\r\n                userId:userId,\r\n                title:title,\r\n                body:body\r\n            };\r\n            state.maxPostId++;\r\n            state.posts[userId].push(newPost);\r\n            return state;\r\n        }\r\n\r\n        case 'ADD_USER' : {\r\n            let name = action.name;\r\n            let email = action.email;\r\n            state = {...state}; // mutation and broadcasting\r\n            let newUserId = state.maxUserId+1;\r\n            let newUser = {\r\n                id:newUserId,\r\n                name:name,\r\n                email:email,\r\n                address:{\r\n                    street:\"\",\r\n                    city:\"\",\r\n                    zipcode:\"\"\r\n                }\r\n            };\r\n            state.maxUserId++;\r\n            state.users[newUserId] = newUser;\r\n            state.todos[newUserId] = [];\r\n            state.posts[newUserId] = [];\r\n            return state;\r\n        }\r\n\r\n        case 'SET_TODO_STATUS' : {\r\n            let userId = action.userId;\r\n            let todoId = action.todoId;\r\n            let completedValue = action.completedValue;\r\n            let updatedTodo = state.todos[userId].find((todo) =>\r\n            {\r\n                return todo.id === todoId;\r\n            });\r\n\r\n            updatedTodo.completed = completedValue;\r\n            state = {...state}; // mutation and broadcasting\r\n            return state;\r\n        }\r\n\r\n        case 'SELECT_USER' : {\r\n            // { type : 'SELECT_USER', userId : this.state.userId}\r\n            let selectedUserId = action.userId;\r\n            return {...state, selectedUserId:selectedUserId};\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nfunction getUsersDataByUserId(rawUsersData) {\r\n    let usersDataByUserId = [];\r\n    let maxUserId = 0;\r\n    rawUsersData.forEach(user=>\r\n    {\r\n        usersDataByUserId[user.id] = user;\r\n        if ( user.id > maxUserId){\r\n            maxUserId = user.id;\r\n        }\r\n    });\r\n    return [maxUserId,usersDataByUserId];\r\n}\r\n\r\nfunction groupItemsByUserId(data,users) {\r\n    let maxItemId = 0;\r\n    const reducer = (userIdItemsArray, item) => {\r\n        let userId = item.userId;\r\n        let id = item.id;\r\n        if(id > maxItemId){\r\n            maxItemId = id;\r\n        }\r\n        userIdItemsArray[userId].push(item);\r\n        return userIdItemsArray;\r\n    };\r\n\r\n    let userIdItemsArray = [];\r\n    users.forEach( user =>\r\n    {\r\n        userIdItemsArray[user.id] = [];\r\n    });\r\n\r\n    userIdItemsArray = data.reduce(reducer, userIdItemsArray);\r\n    return [maxItemId,userIdItemsArray];\r\n}\r\n\r\nfunction getUpdatedUser(curUser,updatedUserData) {\r\n\r\n    let personalKeys = ['name','email'];\r\n    let addressKeys = ['street','city','zipcode'];\r\n\r\n    personalKeys.forEach(key =>\r\n    {\r\n        curUser[key] = updatedUserData[key];\r\n    });\r\n\r\n    addressKeys.forEach(key =>\r\n    {\r\n        curUser.address[key] = updatedUserData[key];\r\n    });\r\n     return curUser;\r\n}\r\n\r\nexport default mainreducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport mainreducer from './Redux/mainreducer';\r\n\r\nconst appStore = createStore(mainreducer,\r\n    /* preloadedState, */\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(\r\n    <Provider store={appStore}>\r\n        <BrowserRouter>\r\n            <Route component={App}/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}